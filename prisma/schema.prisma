// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  isConnected   Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  slug        String     @unique
  featured    Boolean    @default(false)
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  authorId    String     @db.ObjectId
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])
  comments    Comment[]
  order       Int        @default(0)
  imageUrl    String?
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  postIds     String[] @db.ObjectId
  posts       Post[]   @relation(fields: [postIds], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String   @db.ObjectId
  postId    String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}
